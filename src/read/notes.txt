The res.json and res.send methods in Express are used to send responses to the client, but they have some differences:

res.json:

Automatically sets the Content-Type header to application/json.
Converts the JavaScript object or array passed to it into a JSON string.
Useful for sending JSON responses.
Example:
res.json({ firstName: 'Snehlata', lastName: 'Prajapti' });

res.send:

Can send various types of responses, including strings, buffers, and objects.
Automatically sets the Content-Type header based on the type of the response body.
If an object or array is passed, it behaves similarly to res.json by converting it to a JSON string.
Example:res.send("hello from the test");


what is json respons
A JSON response is a response from a server that is formatted as JSON (JavaScript Object Notation).
JSON is a lightweight data interchange format that is easy for humans to read and write and easy
for machines to parse and generate. It is commonly used for transmitting data in web applications.
In the context of an Express.js application, a JSON response is typically sent using the res.json
method. This method converts a JavaScript object or array into a JSON string and sets the Content-Type 
header to application/json.

Here is an example of a JSON response in your Express.js application:
app.get('/user', (req, res) => {
    res.json({ firstName: 'Snehlata', lastName: 'Prajapti' });
});
When a client makes a GET request to the /user endpoint, the server responds with the following JSON data:
{
    "firstName": "Snehlata",
    "lastName": "Prajapti"
}

This JSON response can be easily consumed by client-side applications, such as web browsers or mobile apps, 
and used to display data or perform other actions.

**use, get, head, post, patch, delete, options, listen explain all**

1. app.use()
Purpose: Middleware function that is executed for every incoming request to the specified path or globally if no path is provided.
Example:
app.use("/test", (req, res) => {
    res.send("hello from the test");
});
Explanation: This middleware is triggered for any request to /test and sends a response with the message "hello from the test".

2. app.get()
Purpose: Handles HTTP GET requests, typically used to retrieve data.
Example:
app.get('/user', (req, res) => {
    res.json({ firstName: 'Snehlata', lastName: 'Prajapti' });
});
Explanation: This route responds to GET requests to /user by sending a JSON object with user details.

3. app.head()
Purpose: Handles HTTP HEAD requests, which are similar to GET but do not return a response body, only headers.
Example:
app.head('/user', (req, res) => {
    res.status(200).end();
});
Explanation: This route responds to HEAD requests to /user with a status code of 200 and no body.

4. app.post()
Purpose: Handles HTTP POST requests, typically used to create new resources.
Example:
app.post('/user', (req, res) => {
    res.json({ message: 'User created' });
});
Explanation: This route responds to POST requests to /user by sending a JSON message indicating that a user has been created.

5. app.put()
Purpose: Handles HTTP PUT requests, typically used to update or replace an existing resource or create it if it does not exist.
Example:
app.put('/user', (req, res) => {
    const user = req.body;
    res.json({ message: 'User Updated or created', user });
});
Explanation: This route responds to PUT requests to /user by updating or creating a user with the data provided in the request body.

6. app.patch()
Purpose: Handles HTTP PATCH requests, typically used to apply partial updates to a resource.
Example:
app.patch('/user', (req, res) => {
    const updates = req.body;
    res.json({ message: 'User Updated', updates });
});
Explanation: This route responds to PATCH requests to /user by applying the updates provided in the request body.

7. app.delete()
Purpose: Handles HTTP DELETE requests, typically used to delete a resource.
Example:
app.delete('/user', (req, res) => {
    res.json({ message: 'User deleted' });
});
Explanation: This route responds to DELETE requests to /user by sending a JSON message indicating that the user has been deleted.

8. app.options()
Purpose: Handles HTTP OPTIONS requests, typically used to describe the communication options for a resource.
Example:
app.options('/user', (req, res) => {
    res.set('Allow', 'GET, POST, PUT, PATCH, DELETE, OPTIONS, HEAD');
    res.sendStatus(200);
});
Explanation: This route responds to OPTIONS requests to /user by sending an Allow header that lists the supported HTTP methods.

9. app.listen()
Purpose: Starts the Express server and listens for incoming requests on a specified port.
Example:
app.listen(1300, () => {
    console.log('Server is running on port 1300');
});
Explanation: This starts the server on port 1300 and logs a message to the console indicating that the server is running.


**what is middleware, routes and rautes handler**

#1. Middleware
Definition: Middleware functions are functions that execute during the lifecycle of a request to the server. They have access to the request (req) and response (res) objects and can modify them or terminate the request-response cycle.
Purpose:
Perform tasks like logging, authentication, parsing request bodies, etc.
Pass control to the next middleware or route handler using next().
Example:
const express = require('express');
const app = express();

// Middleware to log requests
app.use((req, res, next) => {
    console.log(`${req.method} request to ${req.url}`);
    next(); // Pass control to the next middleware or route
});

app.get('/user', (req, res) => {
    res.json({ firstName: 'Snehlata', lastName: 'Prajapti' });
});

app.listen(1300, () => {
    console.log('Server is running on port 1300');
});
Key Points:
Middleware can be global (applies to all routes) or specific to certain routes.
Common middleware includes express.json() (to parse JSON bodies) and express.static() (to serve static files).


#2. Routes
Definition: Routes define the endpoints (URLs) of your application and specify how the server should respond to client requests.
Purpose:
Organize your application by defining specific paths and HTTP methods (e.g., GET, POST, PUT, etc.).
Example:
app.get('/user', (req, res) => {
    res.json({ firstName: 'Snehlata', lastName: 'Prajapti' });
});

app.post('/user', (req, res) => {
    res.json({ message: 'User created' });
});

Key Points:
Routes are defined using HTTP methods like GET, POST, PUT, DELETE, etc.
Each route specifies a path (e.g., /user) and a handler function.


#3. Route Handlers
Definition: A route handler is the function that executes when a specific route is matched. It processes the request and sends a response.
Purpose:
Handle the logic for a specific route, such as fetching data, processing input, or sending a response.
Example:
app.get('/user', (req, res) => {
    res.json({ firstName: 'Snehlata', lastName: 'Prajapti' });
});
In this example, the route handler sends a JSON response when a GET request is made to /user.
Key Points:
A route can have multiple handlers (middleware functions) that execute in sequence.
Handlers can perform tasks like validating input, querying a database, or formatting a response.

#How They Work Together
Middleware: Executes first and performs tasks like logging, authentication, or parsing request data.
Routes: Match the incoming request's URL and HTTP method.
Route Handlers: Execute the logic for the matched route and send a response.

//**lecture-2.5
how express js basically handles requests behind the scenes ?

Express.js handles requests behind the scenes by following a structured flow involving middleware, routing, and route handlers. Here's a breakdown of how it works:
1. Request Lifecycle in Express.js
When a client sends a request to an Express.js server, the following steps occur:

Step 1: Request Received
The server receives the HTTP request (e.g., GET, POST, etc.) from the client.
The request contains details like the URL, HTTP method, headers, and body (if applicable).

Step 2: Middleware Execution
Express processes the request through a middleware stack.
Middleware functions are executed in the order they are defined in the code.
Middleware can:
Log requests.
Parse request bodies (e.g., express.json()).
Authenticate users.
Modify the request or response objects.
Pass control to the next middleware or route handler using next().
Example:
app.use((req, res, next) => {
    console.log(`${req.method} request to ${req.url}`);
    next(); // Pass control to the next middleware or route
});

Step 3: Route Matching
Express matches the request's URL and HTTP method against the defined routes.
Routes are defined using methods like app.get(), app.post(), etc.
If a matching route is found, the corresponding route handler is executed.
Example:
app.get('/user', (req, res) => {
    res.json({ firstName: 'Snehlata', lastName: 'Prajapti' });
});

Step 4: Route Handler Execution
The route handler processes the request and sends a response back to the client.
The response can be sent using methods like res.send(), res.json(), or res.status().
Example:
app.get('/user', (req, res) => {
    res.json({ firstName: 'Snehlata', lastName: 'Prajapti' });
});

Step 5: Response Sent
Once the response is sent, the request-response cycle is complete.
If no route matches the request, Express sends a 404 Not Found response by default.
2. Middleware and Routing Flow
Express uses a middleware stack to handle requests. Here's how it works:
Middleware Stack
Middleware functions are executed in the order they are defined.
Each middleware can:
Process the request.
Modify the request or response objects.
End the request-response cycle.
Pass control to the next middleware using next().
Example:
app.use((req, res, next) => {
    console.log('Middleware 1');
    next(); // Pass control to the next middleware
});

app.use((req, res, next) => {
    console.log('Middleware 2');
    next(); // Pass control to the next middleware
});

app.get('/user', (req, res) => {
    res.send('User route');
});

Output for /user:

3. Error Handling
If an error occurs during the request lifecycle, Express skips the remaining middleware and routes and executes error-handling middleware.

Example:
app.use((req, res, next) => {
    const error = new Error('Something went wrong');
    next(error); // Pass the error to the error-handling middleware
});

app.use((err, req, res, next) => {
    res.status(500).json({ message: err.message });
});

4. Behind the Scenes
HTTP Module: Express is built on top of Node.js's http module. It simplifies handling HTTP requests and responses.
Routing: Express uses a routing mechanism to match incoming requests to the appropriate route handlers.
Middleware Stack: Express maintains a stack of middleware functions and executes them sequentially.
Request and Response Objects: Express extends Node.js's req and res objects to provide
additional functionality (e.g., req.body, res.json()).
5. Example Workflow
Here’s an example of how Express handles a GET request to /user:

Request Received:

Client sends a GET request to /user.
Middleware Execution:

Middleware logs the request:
app.use((req, res, next) => {
    console.log(`${req.method} request to ${req.url}`);
    next();
});
Route Matching:

Express matches the request to the /user route:
app.get('/user', (req, res) => {
    res.json({ firstName: 'Snehlata', lastName: 'Prajapti' });
});

Route Handler Execution:

The route handler sends a JSON response
{ "firstName": "Snehlata", "lastName": "Prajapti" }

Response Sent:

The client receives the response.
Summary
Middleware: Executes tasks like logging, authentication, and parsing request data.
Routes: Match the request's URL and HTTP method.
Route Handlers: Process the request and send a response.
Error Handling: Handles errors during the request lifecycle.

** app.use & app.all?
1. app.use()
Purpose: Used to define middleware functions that are executed for every incoming request to the specified path (or globally if no path is provided).
Key Features:
Matches all HTTP methods (GET, POST, PUT, etc.).
Can be used globally (applies to all routes) or for specific paths.
Does not require an exact match for the path (it matches all sub-paths as well).
Use Case: Commonly used for middleware like logging, authentication, or parsing request bodies.
Example:
const express = require('express');
const app = express();

// Middleware for all routes
app.use((req, res, next) => {
    console.log(`${req.method} request to ${req.url}`);
    next(); // Pass control to the next middleware or route
});

// Middleware for a specific path
app.use('/admin', (req, res, next) => {
    console.log('Admin middleware');
    next();
});

app.get('/admin/dashboard', (req, res) => {
    res.send('Admin Dashboard');
});
Behavior:
The first app.use() middleware runs for all requests.
The second app.use('/admin') middleware runs for all requests starting with /admin, including /admin/dashboard.

2. app.all()
Purpose: Used to define route handlers that handle all HTTP methods (GET, POST, PUT, etc.) for a specific path.
Key Features:
Matches a specific path exactly.
Executes for all HTTP methods (e.g., GET, POST, PUT, etc.).
Use Case: Commonly used for defining a catch-all route for a specific path.
Example:
const express = require('express');
const app = express();

// Handle all HTTP methods for the /user path
app.all('/user', (req, res) => {
    res.send(`Handling ${req.method} request to /user`);
});

app.listen(1300, () => {
    console.log('Server is running on port 1300');
});
Behavior:
The app.all('/user') route will handle GET, POST, PUT, DELETE, etc., requests to /user.


** write a dummy middleware for admin
** write a dummy middleware for all user routes, except user/login
**error handling using app.use("/", (err, req, res, next) {});